package DynamicProgramming;

public class Knapsack_TopDownApproach {

	private static int[][] t;
	
	public static void run() {
		
		int wt[] = {1,3,4,5};
		int val[] = {1,4,5,7};
		int W = 7;
		int n = wt.length;
		
		t = new int[n+1][W+1];
		
		for(int i=0; i< n+1; i++) {
			for(int j=0; j<W+1; j++) {
			
				t[i][j] = 0;
			}
		}
		
				
		int ans = knapsack(wt, val, W, n);
		System.out.println(ans);
	}
	
	private static int knapsack(int wt[], int val[], int W, int n) {
	
		for(int i=1; i<n+1; i++) {
			for(int j=1; j<W+1; j++) {
				
				if(wt[i-1] <= j) {
					
					t[i][j] = Integer.max(val[i-1] + t[i-1][j-wt[i-1]],
							t[i-1][j]);
					
				}
				else {
					t[i][j] = t[i-1][j];
				}	
			}
		}
		
		
		return t[n+1][W+1];
	}
	
	
	
	
	
	
	
	
}
